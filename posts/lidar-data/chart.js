import { Box, useThemeUI } from 'theme-ui'
import {
  Chart,
  Axis,
  AxisLabel,
  Ticks,
  TickLabels,
  Plot,
  Scatter,
  Line,
  Grid,
  Label,
  useChart,
} from '@carbonplan/charts'
import data from './data.json'
import React from 'react'

const sx = {
  reference: {
    borderLeftWidth: '2px',
    borderStyle: 'dashed',
    opacity: 1,
  },
}

const RANGE = [603260, 603225]

const LINES = [
  ['alternative_ground_peak', 'pink', 'Alternative ground peak'],
  ['ground_peak', 'yellow', 'Ground peak'],
  ['signal_beginning', 'green', 'Signal beginning'],
  ['signal_end', 'green', 'Signal end'],
]

const SmallTree = () => {
  const { theme } = useThemeUI()
  const { y } = useChart()
  const height =
    (Math.abs(y(data.alternative_ground_peak) - y(data.signal_beginning)) /
      100) *
    600 *
    0.92

  return (
    <Label
      x={0.95}
      y={data.signal_beginning + 0.1}
      verticalAlign='top'
      height={data.alternative_ground_peak - data.signal_beginning}
    >
      <svg
        height={height}
        width={(height * 76) / 122}
        viewBox='0 0 76 122'
        fill='none'
        id='small-tree'
      >
        <line x1='37' y1='121.5' x2='37' y2='14' stroke={theme.colors.pink} />
        <line
          y1='-0.5'
          x2='20.5922'
          y2='-0.5'
          transform='matrix(-0.806908 -0.590678 0.733561 -0.679623 37.8704 109.762)'
          stroke={theme.colors.pink}
        />
        <line
          y1='-0.5'
          x2='20.1525'
          y2='-0.5'
          transform='matrix(-0.824513 -0.565843 0.711278 -0.70291 37.8704 50.8462)'
          stroke={theme.colors.pink}
        />
        <line
          y1='-0.5'
          x2='20.0263'
          y2='-0.5'
          transform='matrix(0.763904 -0.64533 0.779797 0.626032 37.8704 78.2139)'
          stroke={theme.colors.pink}
        />
        <mask id='path-5-inside-1_203_96' fill='white'>
          <path
            fillRule='evenodd'
            clipRule='evenodd'
            d='M37.4999 0C28.6633 0 21.4999 7.16344 21.4999 16C21.4999 19.5621 22.6639 22.8523 24.6323 25.511C15.6677 25.8359 8.49994 33.2058 8.49994 42.2498C8.49994 47.7141 11.1164 52.5672 15.1649 55.6246C6.62123 56.654 0 63.9287 0 72.7499C0 82.2768 7.72309 89.9999 17.25 89.9999H58.75C68.2769 89.9999 76 82.2768 76 72.7499C76 63.3051 68.4094 55.6331 58.9959 55.5016C62.9526 52.4379 65.4999 47.6413 65.4999 42.2498C65.4999 33.8445 59.3088 26.8852 51.238 25.6834C53.2847 22.9951 54.4999 19.6395 54.4999 16C54.4999 7.16344 47.3364 0 38.4999 0H37.4999Z'
          />
        </mask>
        <path
          d='M24.6323 25.511L24.6685 26.5104L26.5655 26.4416L25.436 24.916L24.6323 25.511ZM15.1649 55.6246L15.2845 56.6175L17.7461 56.3209L15.7675 54.8266L15.1649 55.6246ZM58.9959 55.5016L58.3837 54.7109L56.1227 56.4616L58.9819 56.5015L58.9959 55.5016ZM51.238 25.6834L50.4424 25.0776L49.4178 26.4233L51.0907 26.6724L51.238 25.6834ZM22.4999 16C22.4999 7.71573 29.2156 1 37.4999 1V-1C28.111 -1 20.4999 6.61116 20.4999 16H22.4999ZM25.436 24.916C23.5907 22.4236 22.4999 19.3406 22.4999 16H20.4999C20.4999 19.7835 21.7371 23.281 23.8286 26.106L25.436 24.916ZM24.5961 24.5117C15.0956 24.856 7.49994 32.6657 7.49994 42.2498H9.49994C9.49994 33.746 16.2398 26.8159 24.6685 26.5104L24.5961 24.5117ZM7.49994 42.2498C7.49994 48.0409 10.2743 53.1843 14.5622 56.4226L15.7675 54.8266C11.9586 51.95 9.49994 47.3872 9.49994 42.2498H7.49994ZM15.0452 54.6318C6.00529 55.721 -1 63.4166 -1 72.7499H1C1 64.4408 7.23717 57.5871 15.2845 56.6175L15.0452 54.6318ZM-1 72.7499C-1 82.8291 7.1708 90.9999 17.25 90.9999V88.9999C8.27537 88.9999 1 81.7245 1 72.7499H-1ZM17.25 90.9999H58.75V88.9999H17.25V90.9999ZM58.75 90.9999C68.8292 90.9999 77 82.8291 77 72.7499H75C75 81.7245 67.7246 88.9999 58.75 88.9999V90.9999ZM77 72.7499C77 62.7575 68.9694 54.6409 59.0099 54.5017L58.9819 56.5015C67.8495 56.6254 75 63.8527 75 72.7499H77ZM59.6081 56.2923C63.7989 53.0473 66.4999 47.9638 66.4999 42.2498H64.4999C64.4999 47.3189 62.1063 51.8284 58.3837 54.7109L59.6081 56.2923ZM66.4999 42.2498C66.4999 33.3418 59.9388 25.968 51.3853 24.6943L51.0907 26.6724C58.6788 27.8024 64.4999 34.3472 64.4999 42.2498H66.4999ZM53.4999 16C53.4999 19.4131 52.3611 22.5574 50.4424 25.0776L52.0336 26.2891C54.2083 23.4328 55.4999 19.8658 55.4999 16H53.4999ZM38.4999 1C46.7841 1 53.4999 7.71573 53.4999 16H55.4999C55.4999 6.61116 47.8887 -1 38.4999 -1V1ZM37.4999 1H38.4999V-1H37.4999V1Z'
          fill={theme.colors.pink}
          mask='url(#path-5-inside-1_203_96)'
        />
      </svg>
    </Label>
  )
}
const LargeTree = () => {
  const { theme } = useThemeUI()
  const { y } = useChart()
  const height =
    (Math.abs(y(data.ground_peak) - y(data.signal_beginning)) / 100) *
    600 *
    0.92

  return (
    <Label
      x={0.6}
      y={data.signal_beginning + 0.1}
      verticalAlign='top'
      height={data.ground_peak - data.signal_beginning}
    >
      <svg
        height={height}
        width={(height * 84) / 183}
        viewBox='0 0 84 183'
        fill='none'
      >
        <mask id='path-1-inside-1_204_32' fill='white'>
          <path
            fillRule='evenodd'
            clipRule='evenodd'
            d='M41.5 0C32.6634 0 25.5 7.16344 25.5 16C25.5 19.5897 26.6822 22.9033 28.6784 25.5728C20.1646 26.365 13.5 33.5292 13.5 42.25C13.5 47.7106 16.113 52.5609 20.1569 55.6187C11.0635 56.6571 4 64.3786 4 73.75C4 79.7272 6.87347 85.0332 11.3144 88.3621C4.59109 91.8632 0 98.8954 0 107C0 118.598 9.40202 128 21 128H63C74.598 128 84 118.598 84 107C84 98.8954 79.4089 91.8632 72.6856 88.3621C77.1265 85.0332 80 79.7272 80 73.75C80 64.3786 72.9365 56.6571 63.8431 55.6187C67.887 52.5609 70.5 47.7106 70.5 42.25C70.5 33.5292 63.8354 26.365 55.3216 25.5728C57.3178 22.9033 58.5 19.5897 58.5 16C58.5 7.16344 51.3366 0 42.5 0H41.5Z'
          />
        </mask>
        <path
          fillRule='evenodd'
          clipRule='evenodd'
          d='M41.5 0C32.6634 0 25.5 7.16344 25.5 16C25.5 19.5897 26.6822 22.9033 28.6784 25.5728C20.1646 26.365 13.5 33.5292 13.5 42.25C13.5 47.7106 16.113 52.5609 20.1569 55.6187C11.0635 56.6571 4 64.3786 4 73.75C4 79.7272 6.87347 85.0332 11.3144 88.3621C4.59109 91.8632 0 98.8954 0 107C0 118.598 9.40202 128 21 128H63C74.598 128 84 118.598 84 107C84 98.8954 79.4089 91.8632 72.6856 88.3621C77.1265 85.0332 80 79.7272 80 73.75C80 64.3786 72.9365 56.6571 63.8431 55.6187C67.887 52.5609 70.5 47.7106 70.5 42.25C70.5 33.5292 63.8354 26.365 55.3216 25.5728C57.3178 22.9033 58.5 19.5897 58.5 16C58.5 7.16344 51.3366 0 42.5 0H41.5Z'
          fill={theme.colors.background}
        />
        <path
          d='M28.6784 25.5728L28.7711 26.5685L30.5481 26.4031L29.4793 24.9739L28.6784 25.5728ZM20.1569 55.6187L20.2703 56.6123L22.7538 56.3287L20.76 54.8211L20.1569 55.6187ZM11.3144 88.3621L11.7762 89.2491L13.1857 88.5151L11.9142 87.562L11.3144 88.3621ZM72.6856 88.3621L72.0858 87.562L70.8143 88.5151L72.2238 89.2491L72.6856 88.3621ZM63.8431 55.6187L63.24 54.8211L61.2462 56.3287L63.7297 56.6123L63.8431 55.6187ZM55.3216 25.5728L54.5207 24.9739L53.452 26.4031L55.2289 26.5685L55.3216 25.5728ZM26.5 16C26.5 7.71573 33.2157 1 41.5 1V-1C32.1112 -1 24.5 6.61116 24.5 16H26.5ZM29.4793 24.9739C27.6078 22.4714 26.5 19.3665 26.5 16H24.5C24.5 19.8129 25.7565 23.3353 27.8776 26.1716L29.4793 24.9739ZM28.5858 24.5771C19.5626 25.4167 12.5 33.008 12.5 42.25H14.5C14.5 34.0504 20.7666 27.3133 28.7711 26.5685L28.5858 24.5771ZM12.5 42.25C12.5 48.0372 15.2707 53.1777 19.5537 56.4164L20.76 54.8211C16.9553 51.9441 14.5 47.384 14.5 42.25H12.5ZM20.0434 54.6252C10.4507 55.7205 3 63.8645 3 73.75H5C5 64.8928 11.6762 57.5936 20.2703 56.6123L20.0434 54.6252ZM3 73.75C3 80.0554 6.0326 85.6527 10.7146 89.1623L11.9142 87.562C7.71434 84.4138 5 79.399 5 73.75H3ZM10.8525 87.4752C3.81158 91.1416 -1 98.5081 -1 107H1C1 99.2828 5.3706 92.5847 11.7762 89.2491L10.8525 87.4752ZM-1 107C-1 119.15 8.84974 129 21 129V127C9.95431 127 1 118.046 1 107H-1ZM21 129H63V127H21V129ZM63 129C75.1503 129 85 119.15 85 107H83C83 118.046 74.0457 127 63 127V129ZM85 107C85 98.5081 80.1884 91.1416 73.1475 87.4752L72.2238 89.2491C78.6294 92.5847 83 99.2828 83 107H85ZM73.2854 89.1623C77.9674 85.6527 81 80.0554 81 73.75H79C79 79.399 76.2857 84.4138 72.0858 87.562L73.2854 89.1623ZM81 73.75C81 63.8645 73.5493 55.7205 63.9566 54.6252L63.7297 56.6123C72.3238 57.5936 79 64.8928 79 73.75H81ZM64.4463 56.4164C68.7293 53.1777 71.5 48.0372 71.5 42.25H69.5C69.5 47.384 67.0447 51.9441 63.24 54.8211L64.4463 56.4164ZM71.5 42.25C71.5 33.008 64.4374 25.4167 55.4142 24.5771L55.2289 26.5685C63.2334 27.3133 69.5 34.0504 69.5 42.25H71.5ZM57.5 16C57.5 19.3665 56.3922 22.4714 54.5207 24.9739L56.1224 26.1716C58.2435 23.3353 59.5 19.8129 59.5 16H57.5ZM42.5 1C50.7843 1 57.5 7.71573 57.5 16H59.5C59.5 6.61116 51.8888 -1 42.5 -1V1ZM41.5 1H42.5V-1H41.5V1Z'
          fill={theme.colors.yellow}
          mask='url(#path-1-inside-1_204_32)'
        />
        <line
          x1='42.5'
          y1='13.5'
          x2='42.5'
          y2='183'
          stroke={theme.colors.yellow}
        />
        <line
          y1='-0.5'
          x2='20.5922'
          y2='-0.5'
          transform='matrix(-0.806908 -0.590678 0.733561 -0.679623 42.3704 170.262)'
          stroke={theme.colors.yellow}
        />
        <line
          y1='-0.5'
          x2='20.1525'
          y2='-0.5'
          transform='matrix(-0.824513 -0.565843 0.711278 -0.70291 42.3704 115.846)'
          stroke={theme.colors.yellow}
        />
        <line
          y1='-0.5'
          x2='20.0263'
          y2='-0.5'
          transform='matrix(0.763904 -0.64533 0.779797 0.626032 42.3704 143.214)'
          stroke={theme.colors.yellow}
        />
        <line
          y1='-0.5'
          x2='20.1525'
          y2='-0.5'
          transform='matrix(-0.824513 -0.565843 0.711278 -0.70291 42.3704 46.9031)'
          stroke={theme.colors.yellow}
        />
        <line
          y1='-0.5'
          x2='20.0263'
          y2='-0.5'
          transform='matrix(0.763904 -0.64533 0.779797 0.626032 42.3704 80.4236)'
          stroke={theme.colors.yellow}
        />
        <mask id='path-9-inside-2_204_32' fill='white'>
          <path
            fillRule='evenodd'
            clipRule='evenodd'
            d='M41.5 0C32.6634 0 25.5 7.16344 25.5 16C25.5 19.5897 26.6822 22.9033 28.6784 25.5728C20.1646 26.365 13.5 33.5292 13.5 42.25C13.5 47.7106 16.113 52.5609 20.1569 55.6187C11.0635 56.6571 4 64.3786 4 73.75C4 79.7272 6.87347 85.0332 11.3144 88.3621C4.59109 91.8632 0 98.8954 0 107C0 118.598 9.40202 128 21 128H63C74.598 128 84 118.598 84 107C84 98.8954 79.4089 91.8632 72.6856 88.3621C77.1265 85.0332 80 79.7272 80 73.75C80 64.3786 72.9365 56.6571 63.8431 55.6187C67.887 52.5609 70.5 47.7106 70.5 42.25C70.5 33.5292 63.8354 26.365 55.3216 25.5728C57.3178 22.9033 58.5 19.5897 58.5 16C58.5 7.16344 51.3366 0 42.5 0H41.5Z'
          />
        </mask>
        <path
          d='M28.6784 25.5728L28.7711 26.5685L30.5481 26.4031L29.4793 24.9739L28.6784 25.5728ZM20.1569 55.6187L20.2703 56.6123L22.7538 56.3287L20.76 54.8211L20.1569 55.6187ZM11.3144 88.3621L11.7762 89.2491L13.1857 88.5151L11.9142 87.562L11.3144 88.3621ZM72.6856 88.3621L72.0858 87.562L70.8143 88.5151L72.2238 89.2491L72.6856 88.3621ZM63.8431 55.6187L63.24 54.8211L61.2462 56.3287L63.7297 56.6123L63.8431 55.6187ZM55.3216 25.5728L54.5207 24.9739L53.452 26.4031L55.2289 26.5685L55.3216 25.5728ZM26.5 16C26.5 7.71573 33.2157 1 41.5 1V-1C32.1112 -1 24.5 6.61116 24.5 16H26.5ZM29.4793 24.9739C27.6078 22.4714 26.5 19.3665 26.5 16H24.5C24.5 19.8129 25.7565 23.3353 27.8776 26.1716L29.4793 24.9739ZM28.5858 24.5771C19.5626 25.4167 12.5 33.008 12.5 42.25H14.5C14.5 34.0504 20.7666 27.3133 28.7711 26.5685L28.5858 24.5771ZM12.5 42.25C12.5 48.0372 15.2707 53.1777 19.5537 56.4164L20.76 54.8211C16.9553 51.9441 14.5 47.384 14.5 42.25H12.5ZM20.0434 54.6252C10.4507 55.7205 3 63.8645 3 73.75H5C5 64.8928 11.6762 57.5936 20.2703 56.6123L20.0434 54.6252ZM3 73.75C3 80.0554 6.0326 85.6527 10.7146 89.1623L11.9142 87.562C7.71434 84.4138 5 79.399 5 73.75H3ZM10.8525 87.4752C3.81158 91.1416 -1 98.5081 -1 107H1C1 99.2828 5.3706 92.5847 11.7762 89.2491L10.8525 87.4752ZM-1 107C-1 119.15 8.84974 129 21 129V127C9.95431 127 1 118.046 1 107H-1ZM21 129H63V127H21V129ZM63 129C75.1503 129 85 119.15 85 107H83C83 118.046 74.0457 127 63 127V129ZM85 107C85 98.5081 80.1884 91.1416 73.1475 87.4752L72.2238 89.2491C78.6294 92.5847 83 99.2828 83 107H85ZM73.2854 89.1623C77.9674 85.6527 81 80.0554 81 73.75H79C79 79.399 76.2857 84.4138 72.0858 87.562L73.2854 89.1623ZM81 73.75C81 63.8645 73.5493 55.7205 63.9566 54.6252L63.7297 56.6123C72.3238 57.5936 79 64.8928 79 73.75H81ZM64.4463 56.4164C68.7293 53.1777 71.5 48.0372 71.5 42.25H69.5C69.5 47.384 67.0447 51.9441 63.24 54.8211L64.4463 56.4164ZM71.5 42.25C71.5 33.008 64.4374 25.4167 55.4142 24.5771L55.2289 26.5685C63.2334 27.3133 69.5 34.0504 69.5 42.25H71.5ZM57.5 16C57.5 19.3665 56.3922 22.4714 54.5207 24.9739L56.1224 26.1716C58.2435 23.3353 59.5 19.8129 59.5 16H57.5ZM42.5 1C50.7843 1 57.5 7.71573 57.5 16H59.5C59.5 6.61116 51.8888 -1 42.5 -1V1ZM41.5 1H42.5V-1H41.5V1Z'
          fill={theme.colors.yellow}
          mask='url(#path-9-inside-2_204_32)'
        />
      </svg>
    </Label>
  )
}

const Figure = () => {
  return (
    <Box sx={{ width: '35%', height: '600px' }}>
      <Chart
        // x={[-0.00837900023907423, 0.45219600200653076]}
        // y={[603178.378297817, 603259.7719501641]}
        x={[-0.03, 0.46]}
        y={RANGE}
        clamp={false}
      >
        <Axis left bottom />
        <AxisLabel bottom units='joules'>
          LiDAR return
        </AxisLabel>
        <AxisLabel left units='m' arrow={false}>
          Distance from satellite
        </AxisLabel>
        <Ticks left bottom />
        <TickLabels left format={(d) => d % RANGE[1]} />
        <TickLabels bottom />
        <Grid vertical values={[0.013915494217939783]} sx={sx.reference} />
        <Plot sx={{ position: 'relative' }}>
          <Scatter
            size={5}
            data={data.raw.filter((d) => d[1] > RANGE[1])}
            color='muted'
          />
          <Line
            data={data.smoothed.filter((d) => d[1] > RANGE[1])}
            width={2}
            color='secondary'
          />
          {LINES.map(([key, color]) => (
            <Line
              key={key}
              data={[
                [-0.03, data[key]],
                [1.63, data[key]],
              ]}
              sx={{
                stroke: color,
                strokeWidth: 1,
                strokeDasharray: 4,
              }}
            />
          ))}
        </Plot>
        <SmallTree />
        <LargeTree />
        {LINES.map(([key, color, label]) => (
          <Label
            key={key}
            x={1.63}
            align='right'
            verticalAlign='bottom'
            y={data[key]}
            sx={{ color }}
          >
            {label}
          </Label>
        ))}
      </Chart>
    </Box>
  )
}

export default Figure
